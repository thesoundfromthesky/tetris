import{L as m,ag as g}from"./index-CfS70t6F.js";function B(t){const[n,i]=t.split(":");return k({op:n,extension:i})}function k(t,n=!0){var u;const i=t.extension?(u=f[t.extension])==null?void 0:u[t.op]:w[t.op];if(!i&&(m.Warn(`No mapping found for operation ${t.op} and extension ${t.extension||"KHR_interactivity"}`),n)){const o={},e={flows:{}};if(t.inputValueSockets){o.values={};for(const r in t.inputValueSockets)o.values[r]={name:r}}return t.outputValueSockets&&(e.values={},Object.keys(t.outputValueSockets).forEach(r=>{e.values[r]={name:r}})),{blocks:[],inputs:o,outputs:e}}return i}function b(t,n,i){f[n]||(f[n]={}),f[n][t]=i}const f={BABYLON:{"flow/log":{blocks:["FlowGraphConsoleLogBlock"],inputs:{values:{message:{name:"message"}}}}}},w={"event/onStart":{blocks:["FlowGraphSceneReadyEventBlock"],outputs:{flows:{out:{name:"done"}}}},"event/onTick":{blocks:["FlowGraphSceneTickEventBlock"],inputs:{},outputs:{values:{timeSinceLastTick:{name:"deltaTime",gltfType:"number"}},flows:{out:{name:"done"}}}},"event/send":{blocks:["FlowGraphSendCustomEventBlock"],outputs:{flows:{out:{name:"done"}}},extraProcessor(t,n,i,u,o){if(n.op!=="event/send"||!t.configuration||Object.keys(t.configuration).length!==1)throw new Error("Receive event should have a single configuration object, the event itself");const r=t.configuration.event.value[0];if(typeof r!="number")throw new Error("Event id should be a number");const l=u.arrays.events[r],p=o[0];return p.config||(p.config={}),p.config.eventId=l.eventId,p.config.eventData=l.eventData,o}},"event/receive":{blocks:["FlowGraphReceiveCustomEventBlock"],outputs:{flows:{out:{name:"done"}}},validation(t,n){var e;if(!t.configuration)return m.Error("Receive event should have a configuration object"),!1;const i=t.configuration.event;if(!i)return m.Error("Receive event should have a single configuration object, the event itself"),!1;const u=i.value[0];return typeof u!="number"?(m.Error("Event id should be a number"),!1):((e=n.events)==null?void 0:e[u])?!0:(m.Error(`Event with id ${u} not found`),!1)},extraProcessor(t,n,i,u,o){if(n.op!=="event/receive"||!t.configuration||Object.keys(t.configuration).length!==1)throw new Error("Receive event should have a single configuration object, the event itself");const r=t.configuration.event.value[0];if(typeof r!="number")throw new Error("Event id should be a number");const l=u.arrays.events[r],p=o[0];return p.config||(p.config={}),p.config.eventId=l.eventId,p.config.eventData=l.eventData,o}},"math/e":a("FlowGraphEBlock"),"math/pi":a("FlowGraphPIBlock"),"math/inf":a("FlowGraphInfBlock"),"math/nan":a("FlowGraphNaNBlock"),"math/abs":a("FlowGraphAbsBlock"),"math/sign":a("FlowGraphSignBlock"),"math/trunc":a("FlowGraphTruncBlock"),"math/floor":a("FlowGraphFloorBlock"),"math/ceil":a("FlowGraphCeilBlock"),"math/round":{blocks:["FlowGraphRoundBlock"],configuration:{},inputs:{values:{a:{name:"a"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(t,n,i,u,o){return o[0].config=o[0].config||{},o[0].config.roundHalfAwayFromZero=!0,o}},"math/fract":a("FlowGraphFractBlock"),"math/neg":a("FlowGraphNegationBlock"),"math/add":a("FlowGraphAddBlock",["a","b"],!0),"math/sub":a("FlowGraphSubtractBlock",["a","b"],!0),"math/mul":{blocks:["FlowGraphMultiplyBlock"],extraProcessor(t,n,i,u,o){o[0].config=o[0].config||{},o[0].config.useMatrixPerComponent=!0;let e=-1;return Object.keys(t.values||{}).find(r=>{var l;return((l=t.values)==null?void 0:l[r].type)!==void 0?(e=t.values[r].type,!0):!1}),e!==-1&&(o[0].config.type=u.arrays.types[e].flowGraphType),o}},"math/div":a("FlowGraphDivideBlock",["a","b"],!0),"math/rem":a("FlowGraphModuloBlock",["a","b"]),"math/min":a("FlowGraphMinBlock",["a","b"]),"math/max":a("FlowGraphMaxBlock",["a","b"]),"math/clamp":a("FlowGraphClampBlock",["a","b","c"]),"math/saturate":a("FlowGraphSaturateBlock"),"math/mix":a("FlowGraphMathInterpolationBlock",["a","b","c"]),"math/eq":a("FlowGraphEqualityBlock",["a","b"]),"math/lt":a("FlowGraphLessThanBlock",["a","b"]),"math/le":a("FlowGraphLessThanOrEqualBlock",["a","b"]),"math/gt":a("FlowGraphGreaterThanBlock",["a","b"]),"math/ge":a("FlowGraphGreaterThanOrEqualBlock",["a","b"]),"math/isnan":a("FlowGraphIsNaNBlock"),"math/isinf":a("FlowGraphIsInfBlock"),"math/select":{blocks:["FlowGraphConditionalBlock"],inputs:{values:{condition:{name:"condition"},a:{name:"onTrue"},b:{name:"onFalse"}}},outputs:{values:{value:{name:"output"}}}},"math/random":{blocks:["FlowGraphRandomBlock"],outputs:{values:{value:{name:"value"}}}},"math/sin":a("FlowGraphSinBlock"),"math/cos":a("FlowGraphCosBlock"),"math/tan":a("FlowGraphTanBlock"),"math/asin":a("FlowGraphASinBlock"),"math/acos":a("FlowGraphACosBlock"),"math/atan":a("FlowGraphATanBlock"),"math/atan2":a("FlowGraphATan2Block",["a","b"]),"math/sinh":a("FlowGraphSinhBlock"),"math/cosh":a("FlowGraphCoshBlock"),"math/tanh":a("FlowGraphTanhBlock"),"math/asinh":a("FlowGraphASinhBlock"),"math/acosh":a("FlowGraphACoshBlock"),"math/atanh":a("FlowGraphATanhBlock"),"math/exp":a("FlowGraphExponentialBlock"),"math/log":a("FlowGraphLogBlock"),"math/log2":a("FlowGraphLog2Block"),"math/log10":a("FlowGraphLog10Block"),"math/sqrt":a("FlowGraphSquareRootBlock"),"math/cbrt":a("FlowGraphCubeRootBlock"),"math/pow":a("FlowGraphPowerBlock",["a","b"]),"math/length":a("FlowGraphLengthBlock"),"math/normalize":a("FlowGraphNormalizeBlock"),"math/dot":a("FlowGraphDotBlock",["a","b"]),"math/cross":a("FlowGraphCrossBlock",["a","b"]),"math/rotate2d":a("FlowGraphRotate2DBlock",["a","b"]),"math/rotate3d":a("FlowGraphRotate3DBlock",["a","b","c"]),"math/transform":{blocks:["FlowGraphTransformVectorBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}}},"math/combine2":{blocks:["FlowGraphCombineVector2Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/combine3":{blocks:["FlowGraphCombineVector3Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/combine4":{blocks:["FlowGraphCombineVector4Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/extract2":{blocks:["FlowGraphExtractVector2Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"}}}},"math/extract3":{blocks:["FlowGraphExtractVector3Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"}}}},"math/extract4":{blocks:["FlowGraphExtractVector4Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"}}}},"math/transpose":a("FlowGraphTransposeBlock"),"math/determinant":a("FlowGraphDeterminantBlock"),"math/inverse":a("FlowGraphInvertMatrixBlock"),"math/matmul":a("FlowGraphMatrixMultiplicationBlock",["a","b"]),"math/matCompose":{blocks:["FlowGraphMatrixCompose"],inputs:{values:{translation:{name:"position",gltfType:"float3"},rotation:{name:"rotationQuaternion",gltfType:"float4"},scale:{name:"scaling",gltfType:"float3"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(t,n,i,u,o,e){const r=o[0].dataInputs.find(l=>l.name==="rotationQuaternion");if(!r)throw new Error("Rotation quaternion input not found");return e._connectionValues[r.uniqueId]&&(e._connectionValues[r.uniqueId].type="Quaternion"),o}},"math/matDecompose":{blocks:["FlowGraphMatrixDecompose"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{translation:{name:"position"},rotation:{name:"rotationQuaternion"},scale:{name:"scaling"}}}},"math/combine2x2":{blocks:["FlowGraphCombineMatrix2DBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(t,n,i,u,o){return o[0].config=o[0].config||{},o[0].config.inputIsColumnMajor=!0,o}},"math/extract2x2":{blocks:["FlowGraphExtractMatrix2DBlock"],inputs:{values:{a:{name:"input",gltfType:"float2x2"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"}}}},"math/combine3x3":{blocks:["FlowGraphCombineMatrix3DBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"},e:{name:"input_4",gltfType:"number"},f:{name:"input_5",gltfType:"number"},g:{name:"input_6",gltfType:"number"},h:{name:"input_7",gltfType:"number"},i:{name:"input_8",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(t,n,i,u,o){return o[0].config=o[0].config||{},o[0].config.inputIsColumnMajor=!0,o}},"math/extract3x3":{blocks:["FlowGraphExtractMatrix3DBlock"],inputs:{values:{a:{name:"input",gltfType:"float3x3"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"},4:{name:"output_4"},5:{name:"output_5"},6:{name:"output_6"},7:{name:"output_7"},8:{name:"output_8"}}}},"math/combine4x4":{blocks:["FlowGraphCombineMatrixBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"},e:{name:"input_4",gltfType:"number"},f:{name:"input_5",gltfType:"number"},g:{name:"input_6",gltfType:"number"},h:{name:"input_7",gltfType:"number"},i:{name:"input_8",gltfType:"number"},j:{name:"input_9",gltfType:"number"},k:{name:"input_10",gltfType:"number"},l:{name:"input_11",gltfType:"number"},m:{name:"input_12",gltfType:"number"},n:{name:"input_13",gltfType:"number"},o:{name:"input_14",gltfType:"number"},p:{name:"input_15",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(t,n,i,u,o){return o[0].config=o[0].config||{},o[0].config.inputIsColumnMajor=!0,o}},"math/extract4x4":{blocks:["FlowGraphExtractMatrixBlock"],configuration:{},inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"},4:{name:"output_4"},5:{name:"output_5"},6:{name:"output_6"},7:{name:"output_7"},8:{name:"output_8"},9:{name:"output_9"},10:{name:"output_10"},11:{name:"output_11"},12:{name:"output_12"},13:{name:"output_13"},14:{name:"output_14"},15:{name:"output_15"}}}},"math/compose":{blocks:["FlowGraphMatrixCompose"],configuration:{},inputs:{values:{translation:{name:"position",gltfType:"float3"},rotation:{name:"rotationQuaternion",gltfType:"float4"},scale:{name:"scaling",gltfType:"float3"}}},outputs:{values:{value:{name:"output"}}}},"math/decompose":{blocks:["FlowGraphMatrixDecompose"],configuration:{},inputs:{values:{a:{name:"input"}}},outputs:{values:{translation:{name:"position"},rotation:{name:"rotationQuaternion"},scale:{name:"scaling"}}}},"math/not":{blocks:["FlowGraphBitwiseNotBlock"],inputs:{values:{a:{name:"a"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(t,n,i,u,o,e){var l;o[0].config=o[0].config||{};const r=o[0].dataInputs[0];return o[0].config.valueType=((l=e._connectionValues[r.uniqueId])==null?void 0:l.type)??"FlowGraphInteger",o}},"math/and":{blocks:["FlowGraphBitwiseAndBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(t,n,i,u,o,e){var p,c;o[0].config=o[0].config||{};const r=o[0].dataInputs[0],l=o[0].dataInputs[1];return o[0].config.valueType=((p=e._connectionValues[r.uniqueId])==null?void 0:p.type)??((c=e._connectionValues[l.uniqueId])==null?void 0:c.type)??"FlowGraphInteger",o}},"math/or":{blocks:["FlowGraphBitwiseOrBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(t,n,i,u,o,e){var p,c;o[0].config=o[0].config||{};const r=o[0].dataInputs[0],l=o[0].dataInputs[1];return o[0].config.valueType=((p=e._connectionValues[r.uniqueId])==null?void 0:p.type)??((c=e._connectionValues[l.uniqueId])==null?void 0:c.type)??"FlowGraphInteger",o}},"math/xor":{blocks:["FlowGraphBitwiseXorBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(t,n,i,u,o,e){var p,c;o[0].config=o[0].config||{};const r=o[0].dataInputs[0],l=o[0].dataInputs[1];return o[0].config.valueType=((p=e._connectionValues[r.uniqueId])==null?void 0:p.type)??((c=e._connectionValues[l.uniqueId])==null?void 0:c.type)??"FlowGraphInteger",o}},"math/asr":a("FlowGraphBitwiseRightShiftBlock",["a","b"]),"math/lsl":a("FlowGraphBitwiseLeftShiftBlock",["a","b"]),"math/clz":a("FlowGraphLeadingZerosBlock"),"math/ctz":a("FlowGraphTrailingZerosBlock"),"math/popcnt":a("FlowGraphOneBitsCounterBlock"),"math/rad":a("FlowGraphDegToRadBlock"),"math/deg":a("FlowGraphRadToDegBlock"),"type/boolToInt":a("FlowGraphBooleanToInt"),"type/boolToFloat":a("FlowGraphBooleanToFloat"),"type/intToBool":a("FlowGraphIntToBoolean"),"type/intToFloat":a("FlowGraphIntToFloat"),"type/floatToInt":a("FlowGraphFloatToInt"),"type/floatToBool":a("FlowGraphFloatToBoolean"),"flow/sequence":{blocks:["FlowGraphSequenceBlock"],extraProcessor(t,n,i,u,o){const e=o[0];return e.config||(e.config={}),e.config.outputSignalCount=Object.keys(t.flows||[]).length,e.signalOutputs.forEach((r,l)=>{r.name="out_"+l}),o}},"flow/branch":{blocks:["FlowGraphBranchBlock"],outputs:{flows:{true:{name:"onTrue"},false:{name:"onFalse"}}}},"flow/switch":{blocks:["FlowGraphSwitchBlock"],configuration:{cases:{name:"cases",inOptions:!0,defaultValue:[]}},inputs:{values:{selection:{name:"case"}}},validation(t){if(t.configuration&&t.configuration.cases){const n=t.configuration.cases.value;if(!n.every(o=>typeof o=="number"&&/^\d+$/.test(o.toString())))return t.configuration.cases.value=[],!0;const u=new Set(n);t.configuration.cases.value=Array.from(u)}return!0},extraProcessor(t,n,i,u,o){if(n.op!=="flow/switch"||!t.flows||Object.keys(t.flows).length===0)throw new Error("Switch should have a single configuration object, the cases array");return o[0].signalOutputs.forEach(r=>{r.name!=="default"&&(r.name="out_"+r.name)}),o}},"flow/while":{blocks:["FlowGraphWhileLoopBlock"],outputs:{flows:{loopBody:{name:"executionFlow"}}}},"flow/for":{blocks:["FlowGraphForLoopBlock"],configuration:{initialIndex:{name:"initialIndex",gltfType:"number",inOptions:!0,defaultValue:0}},inputs:{values:{startIndex:{name:"startIndex",gltfType:"number"},endIndex:{name:"endIndex",gltfType:"number"}}},outputs:{values:{index:{name:"index"}},flows:{loopBody:{name:"executionFlow"}}}},"flow/doN":{blocks:["FlowGraphDoNBlock"],configuration:{},inputs:{values:{n:{name:"maxExecutions",gltfType:"number"}}},outputs:{values:{currentCount:{name:"executionCount"}}}},"flow/multiGate":{blocks:["FlowGraphMultiGateBlock"],configuration:{isRandom:{name:"isRandom",gltfType:"boolean",inOptions:!0,defaultValue:!1},isLoop:{name:"isLoop",gltfType:"boolean",inOptions:!0,defaultValue:!1}},extraProcessor(t,n,i,u,o){if(n.op!=="flow/multiGate"||!t.flows||Object.keys(t.flows).length===0)throw new Error("MultiGate should have a single configuration object, the number of output flows");const e=o[0];return e.config||(e.config={}),e.config.outputSignalCount=Object.keys(t.flows).length,e.signalOutputs.forEach((r,l)=>{r.name="out_"+l}),o}},"flow/waitAll":{blocks:["FlowGraphWaitAllBlock"],configuration:{inputFlows:{name:"inputSignalCount",gltfType:"number",inOptions:!0,defaultValue:0}},inputs:{flows:{"[segment]":{name:"in_$1"}}},validation(t){var n,i;return typeof((i=(n=t.configuration)==null?void 0:n.inputFlows)==null?void 0:i.value[0])!="number"&&(t.configuration=t.configuration||{inputFlows:{value:[0]}},t.configuration.inputFlows.value=[0]),!0}},"flow/throttle":{blocks:["FlowGraphThrottleBlock"],outputs:{flows:{err:{name:"error"}}}},"flow/setDelay":{blocks:["FlowGraphSetDelayBlock"],outputs:{flows:{err:{name:"error"}}}},"flow/cancelDelay":{blocks:["FlowGraphCancelDelayBlock"]},"variable/get":{blocks:["FlowGraphGetVariableBlock"],validation(t){var n,i;return(i=(n=t.configuration)==null?void 0:n.variable)!=null&&i.value?!0:(m.Error("Variable get block should have a variable configuration"),!1)},configuration:{variable:{name:"variable",gltfType:"number",flowGraphType:"string",inOptions:!0,isVariable:!0,dataTransformer(t,n){return[n.getVariableName(t[0])]}}}},"variable/set":{blocks:["FlowGraphSetVariableBlock"],configuration:{variable:{name:"variable",gltfType:"number",flowGraphType:"string",inOptions:!0,isVariable:!0,dataTransformer(t,n){return[n.getVariableName(t[0])]}}}},"variable/setMultiple":{blocks:["FlowGraphSetVariableBlock"],configuration:{variables:{name:"variables",gltfType:"number",flowGraphType:"string",inOptions:!0,dataTransformer(t,n){return[t[0].map(i=>n.getVariableName(i))]}}},extraProcessor(t,n,i,u,o){return o[0].dataInputs.forEach(r=>{r.name=u.getVariableName(+r.name)}),o}},"variable/interpolate":{blocks:["FlowGraphInterpolationBlock","FlowGraphContextBlock","FlowGraphPlayAnimationBlock","FlowGraphBezierCurveEasing","FlowGraphGetVariableBlock"],configuration:{variable:{name:"propertyName",inOptions:!0,isVariable:!0,dataTransformer(t,n){return[n.getVariableName(t[0])]}},useSlerp:{name:"animationType",inOptions:!0,defaultValue:!1,dataTransformer:t=>t[0]===!0?["Quaternion"]:[void 0]}},inputs:{values:{value:{name:"value_1"},duration:{name:"duration_1",gltfType:"number"},p1:{name:"controlPoint1",toBlock:"FlowGraphBezierCurveEasing"},p2:{name:"controlPoint2",toBlock:"FlowGraphBezierCurveEasing"}},flows:{in:{name:"in",toBlock:"FlowGraphPlayAnimationBlock"}}},outputs:{flows:{err:{name:"error",toBlock:"FlowGraphPlayAnimationBlock"},out:{name:"out",toBlock:"FlowGraphPlayAnimationBlock"},done:{name:"done",toBlock:"FlowGraphPlayAnimationBlock"}}},interBlockConnectors:[{input:"object",output:"userVariables",inputBlockIndex:2,outputBlockIndex:1,isVariable:!0},{input:"animation",output:"animation",inputBlockIndex:2,outputBlockIndex:0,isVariable:!0},{input:"easingFunction",output:"easingFunction",inputBlockIndex:0,outputBlockIndex:3,isVariable:!0},{input:"value_0",output:"value",inputBlockIndex:0,outputBlockIndex:4,isVariable:!0}],extraProcessor(t,n,i,u,o){var h;var e,r;const l=o[0],p=(h=t.configuration)==null?void 0:h.variable.value[0];if(typeof p!="number")throw m.Error("Variable index is not defined for variable interpolation block"),new Error("Variable index is not defined for variable interpolation block");const c=u.arrays.staticVariables[p];typeof l.config.animationType.value>"u"&&(u.arrays.staticVariables,l.config.animationType.value=g(c.type));const s=o[4];return s.config||(s.config={}),(e=s.config).variable||(e.variable={}),s.config.variable.value=u.getVariableName(p),(r=o[3]).config||(r.config={}),o}},"pointer/get":{blocks:["FlowGraphGetPropertyBlock","FlowGraphJsonPointerParserBlock"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customGetFunction",output:"getFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor(t,n,i,u,o){return o.forEach(e=>{e.className==="FlowGraphJsonPointerParserBlock"&&(e.config||(e.config={}),e.config.outputValue=!0)}),o}},"pointer/set":{blocks:["FlowGraphSetPropertyBlock","FlowGraphJsonPointerParserBlock"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{value:{name:"value"},"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customSetFunction",output:"setFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor(t,n,i,u,o){return o.forEach(e=>{e.className==="FlowGraphJsonPointerParserBlock"&&(e.config||(e.config={}),e.config.outputValue=!0)}),o}},"pointer/interpolate":{blocks:["FlowGraphInterpolationBlock","FlowGraphJsonPointerParserBlock","FlowGraphPlayAnimationBlock","FlowGraphEasingBlock"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{value:{name:"value_1"},"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"},duration:{name:"duration_1",gltfType:"number"},p1:{name:"controlPoint1",toBlock:"FlowGraphEasingBlock"},p2:{name:"controlPoint2",toBlock:"FlowGraphEasingBlock"}},flows:{in:{name:"in",toBlock:"FlowGraphPlayAnimationBlock"}}},outputs:{flows:{err:{name:"error",toBlock:"FlowGraphPlayAnimationBlock"},out:{name:"out",toBlock:"FlowGraphPlayAnimationBlock"},done:{name:"done",toBlock:"FlowGraphPlayAnimationBlock"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:2,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customBuildAnimation",output:"generateAnimationsFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"animation",output:"animation",inputBlockIndex:2,outputBlockIndex:0,isVariable:!0},{input:"easingFunction",output:"easingFunction",inputBlockIndex:0,outputBlockIndex:3,isVariable:!0},{input:"value_0",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor(t,n,i,u,o){return o.forEach(e=>{e.className==="FlowGraphJsonPointerParserBlock"?(e.config||(e.config={}),e.config.outputValue=!0):e.className==="FlowGraphInterpolationBlock"&&(e.config||(e.config={}),Object.keys(t.values||[]).forEach(r=>{var p;const l=(p=t.values)==null?void 0:p[r];if(r==="value"&&l){const c=l.type;c!==void 0&&(e.config.animationType=u.arrays.types[c].flowGraphType)}}))}),o}},"animation/start":{blocks:["FlowGraphPlayAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"},speed:{name:"speed",gltfType:"number"},startTime:{name:"from",gltfType:"number",dataTransformer:(t,n)=>[t[0]*n._loader.parent.targetFps]},endTime:{name:"to",gltfType:"number",dataTransformer:(t,n)=>[t[0]*n._loader.parent.targetFps]}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(t,n,i,u,o,e,r){const l=o[o.length-1];return l.config||(l.config={}),l.config.glTF=r,o}},"animation/stop":{blocks:["FlowGraphStopAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(t,n,i,u,o,e,r){const l=o[o.length-1];return l.config||(l.config={}),l.config.glTF=r,o}},"animation/stopAt":{blocks:["FlowGraphStopAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],configuration:{},inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"},stopTime:{name:"stopAtFrame",gltfType:"number",dataTransformer:(t,n)=>[t[0]*n._loader.parent.targetFps]}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(t,n,i,u,o,e,r){const l=o[o.length-1];return l.config||(l.config={}),l.config.glTF=r,o}},"math/switch":{blocks:["FlowGraphDataSwitchBlock"],configuration:{cases:{name:"cases",inOptions:!0,defaultValue:[]}},inputs:{values:{selection:{name:"case"}}},validation(t){if(t.configuration&&t.configuration.cases){const n=t.configuration.cases.value;if(!n.every(o=>typeof o=="number"&&/^\d+$/.test(o.toString())))return t.configuration.cases.value=[],!0;const u=new Set(n);t.configuration.cases.value=Array.from(u)}return!0},extraProcessor(t,n,i,u,o){return o[0].dataInputs.forEach(r=>{r.name!=="default"&&r.name!=="case"&&(r.name="in_"+r.name)}),o}},"debug/log":{blocks:["FlowGraphConsoleLogBlock"],configuration:{message:{name:"messageTemplate",inOptions:!0}}}};function a(t,n=["a"],i){return{blocks:[t],inputs:{values:n.reduce((u,o)=>(u[o]={name:o},u),{})},outputs:{values:{value:{name:"value"}}},extraProcessor(u,o,e,r,l){if(i){l[0].config=l[0].config||{};let p=-1;Object.keys(u.values||{}).find(c=>{var s;return((s=u.values)==null?void 0:s[c].type)!==void 0?(p=u.values[c].type,!0):!1}),p!==-1&&(l[0].config.type=r.arrays.types[p].flowGraphType)}return l}}}export{B as a,b,k as g};
